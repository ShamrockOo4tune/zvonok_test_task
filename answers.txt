Ответы на тестовое задание
####################################################
#                    1. sql                        #
####################################################
1.1.
# метод с join
select a.id, a.title, a.text from article a left join comment c on a.id = c.article_id where c.text is null;

1.2.
# метод с подзапросом
select * from article where id not in (select distinct article_id from comment);



####################################################
#          2. скрипт для определения ip            #
####################################################
В условии задачи и приведенном примере есть противоречие. По заданию нужно вывести "регион", а в примере приведен невозможный для ip 1.1.1.1 вывод: 'REGION: "AU"'
Вероятно при составлении задачи подразумевался двубуквенный код страны. Поэтому решение реализовал с выводом country_сode, которое как раз и будет "AU" для 1.1.1.1  

#!/bin/bash

# используем утилиту jq если она установлена
if command -v jq &> /dev/null  
then
    ip=`curl -s https://api.ipify.org/?format=json | jq -r '.ip'`
    region=`curl -s http://ip-api.com/json/${ip} | jq '.region'`
    country_code=`curl -s http://ip-api.com/json/${ip} | jq '.countryCode'`
    echo -e "ip: ${ip}\nregion: ${region}\ncountry_code: ${country_code}"

# или используем возможности python
elif command -v python3 &> /dev/null
then
    ip=`curl -s https://api.ipify.org/?format=json | python3 -c "import sys, json; print(json.load(sys.stdin)['ip'])"`
    region=`curl -s http://ip-api.com/json/${ip} | python3 -c "import sys, json; print(json.load(sys.stdin)['region'])"` 
    country_code=`curl -s http://ip-api.com/json/${ip} | python3 -c "import sys, json; print(json.load(sys.stdin)['countryCode'])"`
    echo -e "ip: ${ip}\nregion: \"${region}\"\ncountry_code: \"${country_code}\""

# в крайнем случае обойдемся без json
else
    ip=`curl -s https://api.ipify.org`
    region=`curl -s http://ip-api.com/line/${ip}?fields=region`
    country_code=`curl -s http://ip-api.com/line/${ip}?fields=countryCode`
    echo -e "ip: ${ip}\nregion: \"${region}\"\ncountry_code: \"${country_code}\""
fi



####################################################
#  3. Восстановить возможность пользоваться chmod  #
####################################################
Определим где должен находиться chmod: 
$ which chmod

3.1. Скопировать содержимое chmod в другой исполняемый файл
Найти любой другой исполняемый файл (с правами на выполнение), сделать его копию и скопировать chmod в него. 
Затем скопированный файл переместить на место старого chmod

3.2. Скопировать в chmod только атрибуты другого исполняемого файла
$ sudo cp --attributes-only --preserve=mode /usr/bin/chown /usr/bin/chmod

3.3. Утилита rsync имеет опцию менять права цели при синхронизации 
$ rsync /usr/bin/chmod /tmp/chmod --chmod=ugo+x
$ sudo mv /tmp/chmod /usr/bin/chmod



####################################################
#             4. Починить интернет                 #
####################################################
Добавим маршрут по умолчанию:
sudo ip route add default via 192.168.33.1 



####################################################
#                    5. VoIP                       #
####################################################
Релевантного опыта работы с VoIP не имею



####################################################
#       6. Уникальные значения по столбику         #
####################################################
Использую конвееры. awk заберу первый столбец (разделитель - запятая),
затем выделю уникальные значения и подсчитаю количество строк
$ awk -F ',' '{ print$1 }' <путь_к_файлу_с_некоторыми_данными> | uniq | wc -l



####################################################
#            7. Сравнения в скрипте                #
####################################################
7.1 конструкция [[ ... ]] вызывает утилиту test. Для сравнения целых чисел в ней используются операторы:
  -lt
  -le
  -gt
  -ge
  -eq
  -ne

7.2 конструкция (( ... )) задает арифметический контекст. Для сравнения целых чисел используются операторы:
  >
  >=
  <
  =<
  ==
  !=

#!/bin/bash
a=$1
b=$2

echo с -gt / -eq операторами:
if [[ ${a} -gt ${b} ]]; then
echo ${a} ">" ${b};
elif [[ ${a} -eq ${b} ]]; then
echo ${a} "=" ${b};
else
echo ${a} "<" ${b};
fi


echo 'с двойными скобками (арифметический контекст):'
if (( ${a} > ${b} )); then
echo ${a} ">" ${b};
elif (( ${a} == ${b} )); then
echo ${a} "=" ${b};
else
echo ${a} "<" ${b};
fi



####################################################
#                    8. top                        #
####################################################
Высокий процент "украденного" процессорного времени 42.0 st.
ВМ готова давать команды своему виртуальному процессору, но гипервизор распределил процессорное
время физического процессора другому потребителю



####################################################
#             9. touсh - no space left             #
####################################################
9.1 Вероятная причина - превышение максимально допустимого количества файлов для файловой системы
Метаданные о файлах - хранятся в inodes. В файловых системах обычно имеется лимит на количество inodes
Проверить статистику их использования:

$ sudo df -i /

Если дело в этом, то выявить проблемную папку (там где больше всего файлов) и разбираться почему и как они появились

9.2 Поврежденные блоки в файловой системе
Со временем некоторые часть блоков в которых хранится информация на блочном устройстве может выйти из строя, 
а файловая система об этом не хнает. Поэтому не получается ими воспользоваться.
Нужно воспользоваться утилитой fsck



####################################################
#                 10. Dockerfile                   #
####################################################

10.1. Указывать конкретную, необходимую и проверенную версию базового образа (тэг), т.к. со временем могут возникнуть проблемы с совместимостью
10.2. Директиву WORKDIR указать вначале и использовать преимущество ее наличия - можно будет указывать только относительный от нее путь в контейнере
10.3. Обновление и установку пакетов лучше выполнить в рамках одного слоя ( использовать && ) для уменьшения конечного размера образа
10.4. В скриптах рекомендуется использовать apt-get вместо apt. У apt-get более стабильный интерфейс, 
а совместимость интерфейса новых версий apt не гарантирована
10.5. Наверное имеется ввиду пакет nodejs

# Было:
# FROM ubuntu:latest

# ADD ./code /opt/coolproject/code
# WORKDIR /opt/coolproject

# RUN apt update
# RUN apt full-upgrade -y
# RUN apt install -y haproxy ssh node
# RUN apt install -y ruby-full rubygems
# RUN apt autoclean -y && rm -rf /var/cache/apt/*

# CMD ["/opt/coolproject/code/start.sh"]

# Стало:
FROM ubuntu:focal

WORKDIR /opt/coolproject/code
ADD ./code .

RUN apt-get update && \
    apt-get dist-upgrade -y && \
    apt-get install -y \
        haproxy \
        ssh \
        nodejs \
        ruby-full \
        rubygems

RUN apt-get autoclean -y && \
    rm -rf /var/cache/apt/*

CMD ["/opt/coolproject/code/start.sh"]



####################################################
#               11. перехват трафика               #
####################################################
Воспользуюсь утилитой tcpdump:

$ sudo tcpdump -n host <ip_соседнего_компьютера>



####################################################
#            12. Развитие технологий               #
####################################################
Последнее десятилетие значительно возросло потребность и количество данных передаваемых в сетях. 
Способы их хранения, обработки, поддержание скорости доступа к данным и требования к надежности их хранения.
Активое развитие получили облачные вычисления и распределенные системы.
Это, в свою очередь поставило задачи: как эффективно создавать, управлять и мониторить машины (виртуальные и физические),
зачатую в различных подсетях, кластерах. Часто такие машины имеют нестабильные, частоменяющиес ip адреса.

Для решения этих вопросов разрабатывается большое количество програмных средств, как от облачных гигантов AWS, GCP, MS Azure,
так и игроков из вторых и третьих дивизионов и различных организаций: Apache software foundation, Hashicorp, Canonical
Cюда относим средства управления/доступа к одноименным облачным ресурсам (инструменты командной строки, веб консоли)
Создание и управление инфраструктурой: Terraform, Ansible
Хранение и предоставление секретов: Vault, syspass 
Хранение данных - hdfs, распределенные БД (hive, cassandra, tarantool), распределенные потоковые, батчевые обработчики
Для наблюдения за всем разнообразием созданы решения мониторинга (prometheus, grafana, zabbix);
Системы логирования (ELK / EFK стеки)

По моему мнению все вычисления, в конечном итоге, уйдут с локальных устройств в облака.
И потребность в инфраструктуре и сетях будет только возрастать

Также заметна тенденция перехода большинста компьютерных устройств к ОС на unix/linux. В т.ч. об этом сигнализирует 
факт наличия wsl в Windows.

Вся разработка давно перешла на контейнеризированные решения, считаю контейнеризация будет и далее вытеснять виртуализацию

Продолжать развиваться оркестраторы (k8s, системы контейнеризации) и инструменты используемые для оркестрации и автоматизации.
Непрерывная доставка в связке с контролем версий (git, jenkins, gitlab-ci, github actiions, travis-ci)
Интересная связка GitOps конструкции  github - jenkins - helm - atlantis - terraform - k8s  
